package com.surabi.restaurants.config;

import com.surabi.restaurants.entity.AuditLog;
import com.surabi.restaurants.entity.Orders;
import com.surabi.restaurants.repository.AuditRepository;
import com.surabi.restaurants.serviceimpl.UserLoggedDetailsImpl;
import net.bytebuddy.description.modifier.MethodArguments;
import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.reflect.MethodSignature;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.*;
import org.mockito.junit.MockitoJUnitRunner;
import org.mockito.stubbing.OngoingStubbing;
import org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.context.annotation.Import;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.Date;

import static org.junit.Assert.*;
import static org.mockito.Mockito.mock;

@RunWith(MockitoJUnitRunner.class)
//@Import(AnnotationAwareAspectJAutoProxyCreator.class)


public class AspectConfigTest {

    @InjectMocks
    private AspectConfig aspectConfig;;
    @Mock
    private JoinPoint joinPoint;
    @Mock
    AuditRepository auditRepository;

    @Mock
    private MethodSignature methodSignature;
    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    AuditLog auditLog = new AuditLog(5,new Date(), "generated by User","ram");
    @Test
    public void shouldTestAOPlogBeforeAddBill() {
        String[] argumentValues= {"5"};
        Mockito.doReturn(argumentValues).when(joinPoint).getArgs();
        MockedStatic<UserLoggedDetailsImpl> theMock1 = Mockito.mockStatic(UserLoggedDetailsImpl.class);
        theMock1.when(UserLoggedDetailsImpl::getMyDetails).thenReturn("ram");
        Mockito.when(auditRepository.saveAndFlush(Mockito.any(AuditLog.class))).thenReturn(auditLog);
        aspectConfig.logBeforeAddBill(joinPoint);
        Assert.assertEquals(auditLog,auditLog);
        theMock1.close();

    }

    @Test
    public void shouldTestAOPlogBeforeAddUser() {
        String[] argumentValues= {"5"};
        MockedStatic<UserLoggedDetailsImpl> theMock1 = Mockito.mockStatic(UserLoggedDetailsImpl.class);
        theMock1.when(UserLoggedDetailsImpl::getMyDetails).thenReturn("ram");
        Mockito.when(auditRepository.saveAndFlush(Mockito.any(AuditLog.class))).thenReturn(auditLog);
        aspectConfig.logBeforeAddUser();
        Assert.assertEquals(auditLog,auditLog);
        theMock1.close();

    }
    @Test
    public void shouldTestAOPlogBeforeDeteleUser() {
        String[] argumentValues= {"5"};
        MockedStatic<UserLoggedDetailsImpl> theMock1 = Mockito.mockStatic(UserLoggedDetailsImpl.class);
        theMock1.when(UserLoggedDetailsImpl::getMyDetails).thenReturn("ram");
        Mockito.when(auditRepository.saveAndFlush(Mockito.any(AuditLog.class))).thenReturn(auditLog);
        aspectConfig.logBeforeDeteleUser();
        Assert.assertEquals(auditLog,auditLog);
        theMock1.close();

    }

    @Test
    public void shouldTestAOPlogBeforeUpdateUser() {
        String[] argumentValues= {"5"};
        MockedStatic<UserLoggedDetailsImpl> theMock1 = Mockito.mockStatic(UserLoggedDetailsImpl.class);
        theMock1.when(UserLoggedDetailsImpl::getMyDetails).thenReturn("ram");
        Mockito.when(auditRepository.saveAndFlush(Mockito.any(AuditLog.class))).thenReturn(auditLog);
        aspectConfig.logBeforeUpdateUser();
        Assert.assertEquals(auditLog,auditLog);
        theMock1.close();

    }
}